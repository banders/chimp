package ca.bc.gov.catchment.algorithms;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Point;
import org.locationtech.jts.io.ParseException;
import org.locationtech.jts.util.Assert;

import ca.bc.gov.catchment.synthetic.TestHelper;

public class LineSegmenterTest {

	@Test
	public void testSegment1() throws ParseException {
		LineSegmenter lineSegmenter = new LineSegmenter();
		
		LineString line = (LineString)TestHelper.geometryFromWkt("LineStringZ (1681662.67256746161729097 504148.07931434456259012 540, 1681616.38629256142303348 504044.42069493606686592 544, 1681628.40781606803648174 503966.37029408570379019 543, 1681640.55635958584025502 503887.32876863237470388 543, 1681651.33047924400307238 503811.13360444363206625 544, 1681640.19999999995343387 503732.90000000002328306 545.730712890625, 1681673.99908132711425424 503657.87961550243198872 547, 1681733.70449400600045919 503672.58453988563269377 546, 1681805.25880792271345854 503626.34450688865035772 546, 1681863.62543772766366601 503675.13222986832261086 545, 1681875.90117491106502712 503595.09986081253737211 545, 1681818.29662527027539909 503540.3649843605235219 545, 1681887.92285895301029086 503517.04996515344828367 545, 1681951.93714870396070182 503545.40454049501568079 544, 1681939.91539971390739083 503623.454441849142313 543, 1681943.89999999990686774 503688.30000000004656613 542.7806396484375, 1681890.5 503713.90000000002328306 543.45745849609375, 1681870.60000000009313226 503758.09999999997671694 543.0928955078125, 1681791.83991352235898376 503715.29771951027214527 544, 1681741 503764.90000000002328306 544.5640869140625, 1681697.80000000004656613 503749.09999999997671694 544.64727783203125, 1681710.14661133801564574 503832.77692266926169395 544, 1681789.10000000009313226 503785.59999999997671694 543.052978515625, 1681768.66297640278935432 503872.51654357276856899 543, 1681756.38728997018188238 503952.54921469464898109 543, 1681698.73731524916365743 503913.92809677589684725 543, 1681686.71573563758283854 503991.97842566762119532 542, 1681745.10494944965466857 504032.70928724948316813 542, 1681812 504004.29999999998835847 541.80548095703125, 1681814.34972451208159328 504012.36759698204696178 542, 1681849.80000000004656613 503977 541.638427734375, 1681892.05956763541325927 503941.72934715263545513 542, 1682030.3283798994962126 503847.62153084576129913 543)");

		//four coordinates from the line.  p1 is the first, p4 is the last
		Point p1 = (Point)TestHelper.geometryFromWkt("PointZ (1681662.67256746161729097 504148.07931434456259012 540)");
		Point p2 = (Point)TestHelper.geometryFromWkt("PointZ (1681640.19999999995343387 503732.90000000002328306 545.730712890625)");
		Point p3 = (Point)TestHelper.geometryFromWkt("PointZ (1681890.5 503713.90000000002328306 543.45745849609375)");
		Point p4 = (Point)TestHelper.geometryFromWkt("PointZ (1682030.3283798994962126 503847.62153084576129913 543)");
		
		List<Coordinate> coordsToSplitOn = new ArrayList<Coordinate>();
		coordsToSplitOn.add(p1.getCoordinate());
		coordsToSplitOn.add(p2.getCoordinate());
		coordsToSplitOn.add(p3.getCoordinate());
		coordsToSplitOn.add(p4.getCoordinate());
		
		List<LineString> segments = lineSegmenter.segment(line, coordsToSplitOn);
		
		Assert.isTrue(segments.size() == 3, "Expected 3 segments.  Found "+segments.size());
		
		LineString segment1 = segments.get(0);
		Assert.isTrue(segment1.getStartPoint().equals(p1) && segment1.getEndPoint().equals(p2), "Expected first segment to start with p1 and end with p2");
		
		LineString segment2 = segments.get(1);
		Assert.isTrue(segment2.getStartPoint().equals(p2) && segment2.getEndPoint().equals(p3), "Expected first segment to start with p2 and end with p3");
		
		LineString segment3 = segments.get(2);
		Assert.isTrue(segment3.getStartPoint().equals(p3) && segment3.getEndPoint().equals(p4), "Expected first segment to start with p3 and end with p4");
		
	}
	
}
